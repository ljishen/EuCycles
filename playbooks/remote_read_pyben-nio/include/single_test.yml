---
- block:
  - name: (servers {{ num_servs }}/{{ total_servs }}, round {{ index }}/{{ repetition }}, size {{ bytes }}) check/kill the server/client
    become: yes
    # see https://stackoverflow.com/a/9375940
    shell: pkill -KILL -u "$(id -u)" -f 'pyben\-nio.+start'
    ignore_errors: yes
    delegate_to: "{{ hostvars[item]['inventory_hostname'] }}"
    with_items: "{{ groups['all'] }}"

  - name: (servers {{ num_servs }}/{{ total_servs }}, round {{ index }}/{{ repetition }}, size {{ bytes }}) run the server
    become: yes
    # 1. Processor-wide mode of perf stat (-C)
    #   https://perf.wiki.kernel.org/index.php/Tutorial#Processor-wide_mode
    # 2. Pretty printing large numbers (-B)
    #   https://perf.wiki.kernel.org/index.php/Tutorial#Pretty_printing_large_numbers
    shell: >
      LC_NUMERIC=en_US.UTF8
      perf stat -B -C 1-2
      taskset -c 2
      {{ workdir }}/pyben-nio/src/run
      --server start
      --bind {{ hostvars[groups['servers'][serv_idx | int]]['ansible_' + server_outbound_interface]['ipv4']['address'] }}
      --size {{ lookup('template', 'templates/allocator.j2').split(',')[serv_idx | int] }}
      --port {{ port }}
      --filename {{ workdir }}/{{ server_data_filename }}
      --bufsize {{ server_bufsize }}
      --method "{{ server_filtering_method | replace('BELOW', sizes_idx) }}"
    delegate_to: "{{ hostvars[groups['servers'][serv_idx | int]]['inventory_hostname'] }}"
    async: "{{ 2 * 60 * 60 }}"  # each task last for at most 2 hour
    poll: 0
    with_sequence: start=0 count={{ num_servs }}
    loop_control:
      loop_var: serv_idx
    register: perf_server_async_results

  - name: wait for 3 seconds to ensure {{ num_servs }} servers have set up
    pause:
      seconds: 3

  - name: (servers {{ num_servs }}/{{ total_servs }}, round {{ index }}/{{ repetition }}, size {{ bytes }}) run the client
    become: yes
    shell: >
      LC_NUMERIC=en_US.UTF8
      perf stat -B -C 1-2
      taskset -c 2
      {{ workdir }}/pyben-nio/src/run
      --client start
      --addresses
        {%- for i in range(num_servs | int) %} {{ hostvars[groups['servers'][i]]['ansible_' + server_outbound_interface]['ipv4']['address'] }} {% endfor -%}
      --size {{ dataset_size }}
      --port {{ port }}
      --bind {{ hostvars[groups['client'][0]]['ansible_' + client_incoming_interface]['ipv4']['address'] }}
      --bufsize {{ client_bufsize }}
      --method "{{ client_filtering_method }}"
    delegate_to: "{{ hostvars[groups['client'][0]]['inventory_hostname'] }}"
    register: perf_client_result

  - name: (servers {{ num_servs }}/{{ total_servs }}, round {{ index }}/{{ repetition }}, size {{ bytes }}) collect server outputs
    # need to activate privilege escalation to set the user to root to be able to access the job file under /root/.ansible_async/
    become: yes
    async_status:
      jid: "{{ result_item.ansible_job_id }}"
    delegate_to: "{{ result_item._ansible_delegated_vars.ansible_delegated_host }}"
    loop: "{{ perf_server_async_results.results }}"
    loop_control:
      loop_var: result_item
    register: perf_server_async_poll_outputs

  - name: (servers {{ num_servs }}/{{ total_servs }}, round {{ index }}/{{ repetition }}, size {{ bytes }}) save server outputs
    copy:
      backup: "{{ backup_results }}"
      content: "{{ output_item.cmd }}\n\n{{ output_item.stderr }}"
      dest: "{{ logs_dir }}/perf_server_{{ bytes }}_{{ index }}_{{ num_servs }}servs_{{ output_item.result_item.serv_idx }}.log"
      force: yes
    loop: "{{ perf_server_async_poll_outputs.results }}"
    loop_control:
      loop_var: output_item
    no_log: yes

  - name: (servers {{ num_servs }}/{{ total_servs }}, round {{ index }}/{{ repetition }}, size {{ bytes }}) save client output
    copy:
      backup: "{{ backup_results }}"
      content: "{{ perf_client_result.cmd }}\n\n{{ perf_client_result.stderr }}"
      dest: "{{ logs_dir }}/perf_client_{{ bytes }}_{{ index }}_{{ num_servs }}servs.log"
      force: yes

  - name: (servers {{ num_servs }}/{{ total_servs }}, round {{ index }}/{{ repetition }}, size {{ bytes }}) extract data
    command: >
      scripts/extract2json.py
      --size {{ bytes }}
      --index {{ index }}
      --num_servs {{ num_servs }}
      --result_filename {{ result_filename }}
    register: extract_result
    # this task may fail if the previous registers didn't capture the stdout of containers (ansible bugs?)
    ignore_errors: yes

  - name: drop file cache
    become: yes
    # See https://www.kernel.org/doc/Documentation/sysctl/vm.txt
    shell: sync && echo 3 > /proc/sys/vm/drop_caches
    delegate_to: "{{ hostvars[groups['servers'][serv_idx | int]]['inventory_hostname'] }}"
    async: 10
    poll: 1
    with_sequence: start=0 count={{ num_servs }}
    loop_control:
      loop_var: serv_idx

  - set_fact: exe_continue={{ extract_result.rc != 0 }}

  when: exe_continue
