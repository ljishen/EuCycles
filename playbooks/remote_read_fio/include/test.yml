---
- block:
  - name: (index {{ index }}/{{ repetition }}, size {{ bytes }}) run the sender
    become: yes
    docker_container:
      auto_remove: yes
      command: --size={{ bytes }} /root/sender.fio
      detach: yes
      force_kill: yes
      image: ljishen/fio
      name: "{{ fio_container_name }}"
      network_mode: host
      pull: yes
      recreate: yes
      state: started
      volumes:
        - "{{ workdir }}/sender.fio:/root/sender.fio:ro"
    delegate_to: "{{ hostvars[groups['sender'][0]]['inventory_hostname'] }}"
  - name: (index {{ index }}/{{ repetition }}, size {{ bytes }}) run the receiver
    become: yes
    docker_container:
      capabilities: SYS_ADMIN
      cleanup: yes
      command: stat /root/fio/fio --size={{ bytes }} /root/receiver.fio
      detach: false
      force_kill: yes
      image: ljishen/perf
      name: "{{ perf_container_name }}"
      network_mode: host
      pull: yes
      recreate: yes
      state: started
      volumes:
        - "{{ workdir }}/{{ fio_dir_prefix }}{{ receiver_fio_version }}:/root/fio:ro"
        - /lib/x86_64-linux-gnu/libaio.so.1:/lib/x86_64-linux-gnu/libaio.so.1:ro
        - "{{ workdir }}/receiver.fio:/root/receiver.fio:ro"
    delegate_to: "{{ hostvars[groups['receiver'][0]]['inventory_hostname'] }}"
    register: perf_output
  - name: (index {{ index }}/{{ repetition }}, size {{ bytes }}) save output
    copy:
      backup: yes
      content: "{{ perf_output.ansible_facts.docker_container.Output }}"
      dest: "{{ output_dir }}/logs/perf_fio_{{ bytes }}_{{ index }}.log"
      force: yes
  - name: (index {{ index }}/{{ repetition }}, size {{ bytes }}) extract data
    command: >
      scripts/extract2csv.sh
      {{ output_dir }}/logs/perf_fio_{{ bytes }}_{{ index }}.log
      {{ output_dir }}/{{ result_filename }}
      {{ bytes if index == '1' else '' }}
    register: extract_data
    ignore_errors: yes
  - set_fact:
      exe_continue: no
    when: extract_data is failed
  when: exe_continue
